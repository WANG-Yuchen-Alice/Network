RmaxGreedy - single
N = 100; L = 80;
rmax = N/5;
hops = 2*(int)Mathsqrt(N);
goal = 90%
[T]

rmax = Math.sqrt(N);
hops = 10*(int)Mathsqrt(N);

rmax = 2*Math.sqrt(L);
hops = 10*(int)Mathsqrt(L);

RmaxGreedy - multiple
probability p = d2 / sum(d2)
for each signal each time choose 1 sender
each node decides for one sender and tag by distance
Termination: no new receivers; reach the goal; exceed max hops

density: average neighbors per node
density: > 5 90%
density = 3 60-80% 10-30% (K = 10)
density: 2 < 10%

RnaxGreedy - multiple_full
density = 4 <50% (K = 10)
density = 2 <10% (K = 10)
density > 10 90% (K = 10)

==discard competitor if the p is less than 0.5
multiple better than multiple_full

Idea
 - (initial senders far apart) divide the graph into areas with initial senders being the leader of each area; fill each area and exchange infomation in cycle
 - (initial senders squeezed together) send one by one like a tree with the first signal faster by one hop than the following signal
 - (for 1 signal) each round senders check with Rmax and count the new receivers they can reach, they then adjust Rmax to dmax (the distance to the
 farest new receivers). Each sender keep a list of new receivers with descending distance. Sender with max #receiver send first (with dmax)
 and mark the receivers correspondingly. The next sender then start from the receiver after skipping the first several receivers
 that are already marked by previous more advantageous sender. If no more receivers are in the list, this sender does nothing in the current round.
 ==> this is DISTRIBUTED as one sender only know about senders that are with in 2*Rmax with him and wait for superior competitor to make choices first
 ==> only in implementation in Java that the ranking is done centrally


20200825 StrongSigSends
K = 1, 2, 3
maxHop = diagonal / rmax * K
100%







